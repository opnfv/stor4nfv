# Copyright (c) 2018 Huawei Technologies Co., Ltd. All Rights Reserved.
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

---
- name: run the equivalent of "apt-get update" as a separate step
  apt:
    update_cache: yes

- name: install librados-dev and librbd-dev external packages
  apt:
    name: "{{ item }}"
    state: present
  with_items:
    - librados-dev
    - librbd-dev

- name: install docker-py package with pip when enabling containerized deployment
  pip:
    name: docker-py
  when: container_enabled == true

- name: check for opensds release files existed
  stat:
    path: "{{ opensds_dir }}"
  ignore_errors: yes
  register: opensdsreleasesexisted

- name: download opensds release files
  get_url:
    url={{ opensds_download_url }}
    dest={{ opensds_tarball_url }}
  when:
    - opensdsreleasesexisted.stat.exists is undefined or opensdsreleasesexisted.stat.exists == false

- name: extract the opensds release tarball
  unarchive:
    src={{ opensds_tarball_url }}
    dest=/opt/
  when:
    - opensdsreleasesexisted.stat.exists is undefined or opensdsreleasesexisted.stat.exists == false

- name: check for nbp release files existed
  stat:
    path: "{{ nbp_dir }}"
  ignore_errors: yes
  register: nbpreleasesexisted

- name: download nbp release files
  get_url:
    url={{ nbp_download_url }}
    dest={{ nbp_tarball_url }}
  when:
    - nbpreleasesexisted.stat.exists is undefined or nbpreleasesexisted.stat.exists == false

- name: extract the nbp release tarball
  unarchive:
    src={{ nbp_tarball_url }}
    dest=/opt/
  when:
    - nbpreleasesexisted.stat.exists is undefined or nbpreleasesexisted.stat.exists == false

- name: change the mode of all binary files in opensds release
  file:
    path: "{{ opensds_dir }}/bin"
    mode: 0755
    recurse: yes

- name: change the mode of all binary files in nbp release
  file:
    path: "{{ nbp_dir }}/flexvolume"
    mode: 0755
    recurse: yes

- name: create opensds global config directory if it doesn't exist
  file:
    path: "{{ opensds_config_dir }}/driver"
    state: directory
    mode: 0755

- name: create opensds log directory if it doesn't exist
  file:
    path: "{{ opensds_log_dir }}"
    state: directory
    mode: 0755

- name: configure opensds global info
  shell: |
    cat > opensds.conf <<OPENSDS_GLOABL_CONFIG_DOC
    [osdslet]
    api_endpoint = {{ controller_endpoint }}
    graceful = True
    log_file = {{ controller_log_file }}
    socket_order = inc

    [osdsdock]
    api_endpoint = {{ dock_endpoint }}
    log_file = {{ dock_log_file }}
    # Specify which backends should be enabled, sample,ceph,cinder,lvm and so on.
    enabled_backends = {{ enabled_backend }}

    [lvm]
    name = {{ lvm_name }}
    description = {{ lvm_description }}
    driver_name = {{ lvm_driver_name }}
    config_path = {{ lvm_config_path }}

    [ceph]
    name = {{ ceph_name }}
    description = {{ ceph_description }}
    driver_name = {{ ceph_driver_name }}
    config_path = {{ ceph_config_path }}

    [cinder]
    name = {{ cinder_name }}
    description = {{ cinder_description }}
    driver_name = {{ cinder_driver_name }}
    config_path = {{ cinder_config_path }}

    [database]
    endpoint = {{ db_endpoint }}
    driver = {{ db_driver }}
  args:
    chdir: "{{ opensds_config_dir }}"
  ignore_errors: yes
